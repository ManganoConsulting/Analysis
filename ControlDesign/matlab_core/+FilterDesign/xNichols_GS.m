%
% Syntax:
%  stability_margins =
%     Nichols_GS(sys,fig_Nichols,fig_Bode,figureColor,hideBodePhase,figureTitle)
%
% Mandatory Input:
%  sys: MatLab LTI system model, generated by functions 'tf','ss','zpk' or 'frd'
%       (type <help ltimodels> for further information)
%
% Optional Inputs:
%  fig_Nichols:   number of figure for Nichols plot (0: no figure)
%  fig_Bode:      number of figure for bode plot    (0: no figure)
%  figureColor:   figure color (first letter, in plot convention) (default: 'b' - blue)
%  holdGraphs:    hold previous graphs (default: 0)
%                 (note: if previous graphs are to be held, then the
%                        diamonds are not plotted)
%  hideBodePhase: hide Bode phase graph (show only Bode magnitude graph) (default: 0)
%  figureTitle:   title of figures (default: '')
%
% Output: Structure stability_margins, with fields:
% . gainMargins_db, gainMargins_FreqRa -
%    gain margins (dB) and corresponding frequencies (rad/s)
% . phaseMargins_deg, phaseMargins_FreqRa -
%    phase margins (deg) and corresponding frequencies (rad/s)
%
%
function varargout = xNichols_GS(sys,wRa,fig_Nichols,fig_Bode,figureColor,hideBodePhase,figureTitle)
import FilterDesign.*
% input verification
if(~exist('fig_Nichols','var'))   fig_Nichols = 1;   end
if(~exist('fig_Bode','var'))      fig_Bode = 0;      end
if(~exist('figureColor','var'))   figureColor = 'b'; end
if(~exist('hideBodePhase','var')) hideBodePhase = 0; end
if(~exist('figureTitle','var'))   figureTitle = '';  end

% Frequency range
% lDec = -2;                        % Freq Resp Lower Decade rad/sec
% uDec = 2;                         % Freq Resp Upper Decade rad/sec
% wpts = 1000;                      % Number of points in Freq Vector
% wRa  = logspace(lDec,uDec,wpts);  % Freq Vector rad/sec
wHz  = wRa/2/pi;                  % Freq Vector Hz

% Frequency markers (to appear in the plots)
freqMarkers = [0.2 0.5 1 2 5]; % rad/sec

% Get magnitude (db) and Phase (deg) for specified frequencies
[mag,phase] = bode(sys,wRa);
mag_db = 20*log10(squeeze(mag));
phase = squeeze(phase);

% Get identifiers for regions where phase does not vary more than 360 deg
idPhase360 = floor(phase/360);

% Ensure that different curve parts in the same 360-deg-phase region
% are assigned different identifiers
newId = max(idPhase360) + 1; % new identifier
for id = min(idPhase360):max(idPhase360) % for each old identifier
    iPhase = find(idPhase360==id); % get indices corresponding to current identifier
    for i = 2:length(iPhase) % analyze index by index
        if (iPhase(i)-iPhase(i-1))>1 % if indices vary more than one unit, than the curve is not continuous; a new part is starting
            idPhase360(iPhase(i:end)) = newId;  % change identifiers for the starting part
            newId = newId + 1; % new identifier
        end
    end
end

% Phase between -360 and 0 degrees
phase = mod(phase,-360.0);

% Get indices corresponding to frequency markers
iFreqMarkers = zeros(size(freqMarkers)); % initialization
for i = 1:length(freqMarkers)
    currFreqMark = freqMarkers(i);
    iFreqCross = min(find((wRa(1:end-1)-currFreqMark).*(wRa(2:end)-currFreqMark)<=0));
    iFreqMarkers(i) = iFreqCross; % store current index
end

% Generate Nichols plots, if specified

if fig_Nichols; figure(fig_Nichols); end

if fig_Nichols

    % Figure adjusts
    %hold on; 

    % Plot phase and magnitude
    % plot(phase,mag_db,[figureColor '.'],'MarkerSize',4.5);
    for id = min(idPhase360):max(idPhase360)
        iPhase = find(idPhase360==id);
        h = plot(phase(iPhase),mag_db(iPhase)); set(h,'Color',figureColor);
        hold on;
    end
    grid on;
    set(gca,'grid',':');
    axis([-360 0 -40 40]);
    title(figureTitle);
    ylabel('Gain (dB)');
    xlabel('Phase (deg)');
    hold on;

    % Plot frequency markers
    % array of markers and colors
    markers = {'o','p','^','d','s','<','>','v','h'};
    colors = {'k','r','g','b','y','c','m'};
    % array of handles (initialization)
    freqMarkHandles = zeros(size(freqMarkers));
    legendTitles = cell(size(freqMarkers));
    % for each frequency marker
    for i = 1:length(iFreqMarkers)
        % get current index over arrays of phase, magnitude and frequency
        currIndex = iFreqMarkers(i);
        % get current marker and colors
        currMarker = markers{1+rem(i-1,length(markers))};
        currColor  = colors{1+rem(i-1,length(colors))};
        % plot
        freqMarkHandles(i) = ...
            plot(phase(currIndex),mag_db(currIndex),currMarker,...
            'MarkerSize',8,'MarkerFaceColor',currColor,'MarkerEdgeColor','k');
        % update legend
        legendTitles{i} = [num2str(freqMarkers(i)) ' rad/sec'];
    end  % end for i
    % add legend for frequency markers
    legend(freqMarkHandles,legendTitles);

    % Plot diamonds
%         % Plot outer diamond:  45 deg, 10 dB
%         xn1=[-180 -150 -135]; xn1n=[-180 -210 -225]; xn2=[-180 -180];
%         yn1=[-10 -4 0]; yn2=[-10 10]; yn3=[10 4 0];
%         plot(xn1,yn1,'r--',xn2,yn2,'r--',xn1,yn3,'r--');
%         plot(xn1n,yn1,'r--',xn2,yn2,'r--',xn1n,yn3,'r--');
% 
%         % Plot inner diamond: 30 deg, 6 dB
%         xn1=[-180 -160 -150]; xn1n=[-180 -200 -210]; xn2=[-180 -180];
%         yn1=[-10 -4 0]*0.6; yn2=[-10 10]*0.6; yn3=[10 4 0]*0.6;
%         plot(xn1,yn1,'r-',xn2,yn2,'r-',xn1,yn3,'r-');
%         plot(xn1n,yn1,'r-',xn2,yn2,'r-',xn1n,yn3,'r-');

    % Outer diamond: 8dB, 60deg
    vod = [-180 -8 0;-120 0 0;-180 8 0;-240 0 0];
    fod  = [1 2 3 4];
%     patch('faces',fod,'vertices',vod,'FaceColor',[1 0.5 0],'FaceAlpha',.0,...
%         'EdgeAlpha',.4);
    % Inner diamond
    vid = [-180 -6 0;-150 -3 0;-135 0 0;-150 3 0;-180 6 0;-210 3 0;-225 0 0;-210 -3 0];
    fid = [1:8];
    patch('faces',fid,'vertices',vid,'FaceColor',[1 0 0],'FaceAlpha',.0,...
        'EdgeAlpha',.8,'EdgeColor',[1 0 0],'LineWidth',2);
    x180 = [-180 -180];y180 = [-6 6]; x0 = [-225 -135]; y0 = [0 0];
    plot(x180,y180,'k:',x0,y0,'k:','LineWidth',2);
%     text(-133,0,'45^o','BackGroundColor','w')
%     text(-232,0,'-45^o','BackGroundColor','w')
%     text(-183,7,'6dB','BackGroundColor','w')
%     text(-183,-7,'-6dB','BackGroundColor','w')

end %endif fig_Nichols

% Generate Bode plots, if specified

if fig_Bode

    % Figure adjusts
    figure(fig_Bode)

    % Plot Bode Gain
    if(~hideBodePhase)
        subplot(2,1,1);
    else
        subplot(1,1,1);
    end
    h = semilogx(wRa,mag_db,'-'); set(h,'Color',figureColor);
    set(gca,'XScale','log');
    hold on; grid on; axis([min(wRa), max(wRa), min(mag_db), max(mag_db)]);%axis([0.1, 100, -60, 20]);
    plot(2,0,'or','MarkerSize',8,'MarkerFaceColor','r');
    ylabel('Gain (dB)');
    title(figureTitle);
    % Show, in the y axis, the magnitude of the system at 2 rad/s
    % note: if several curves are to be plotted (holdGraphs=1), this
    % function has no meaning
        %magAt2rds = interp1(wRa,mag_db,2);
        %set(gca,'YTick',sort([-60:20:20 magAt2rds]));

    %     % Plot Bode Phase
    %       if(~hideBodePhase)
    %         subplot(2,1,2);
    %         h = semilogx(wRa,phase,'-'); set(h,'Color',figureColor);
    %         set(gca,'XScale','log');
    %         hold on; grid on; axis([0.1, 100, -360, 0]);
    %         plot([min(wRa) max(wRa)],[-180 -180],'-r','MarkerSize',5,'MarkerFaceColor','r')
    %         ylabel('Phase (deg)')
    %       end

    % axis legend
    xlabel('Frequency (rad/s)');

end  %endif fig_Bode

% Plot Bode Phase
if(~hideBodePhase)
    subplot(2,1,2);
    h = semilogx(wRa,phase,'-'); set(h,'Color',figureColor);
    set(gca,'XScale','log');
    hold on; grid on; axis([min(wRa), max(wRa), -360, 0]);%axis([0.1, 100, -360, 0]);
    plot([min(wRa) max(wRa)],[-180 -180],'-r','MarkerSize',5,'MarkerFaceColor','r')
    ylabel('Phase (deg)')
    xlabel('Frequency (rad/sec)')
end


% Calculate gain and phase margins, if the user asked for an output
if nargout

    % Get gain margins
%     phaseCross = -180;
%     iPhaseCross = min(find((phase(1:end-1)-phaseCross).*(phase(2:end)-phaseCross)<=0));
%     gainMargins_db = -mag_db(iPhaseCross);
%     gainMargins_FreqRa = wRa(iPhaseCross); % corresponding frequencies
% 
%     % Get phase margins
%     gainCross_db = 0;
%     iGainCross = min(find((mag_db(1:end-1)-gainCross_db).*(mag_db(2:end)-gainCross_db)<=0));
%     phaseMargins_deg = phase(iGainCross)-(-180);
%     phaseMargins_FreqRa = wRa(iGainCross); % corresponding frequencies
% 
%     % Define output
%     stability_margins =  ...
%         struct('gainMargins_db',gainMargins_db,'gainMargins_FreqRa',gainMargins_FreqRa, ...
%         'phaseMargins_deg',phaseMargins_deg,'phaseMargins_FreqRa',phaseMargins_FreqRa);

    stability_margins = allmargin(mag, phase, wRa);
    stability_margins.GainMargin = 20*log10(stability_margins.GainMargin);
    stability_margins.freqHz= wRa/2/pi;
    stability_margins.magdB = mag_db;
    stability_margins.phdeg = phase;
    varargout{1} = stability_margins;

end

return
