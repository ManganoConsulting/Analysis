function createToolRibbion(obj, currSelToolRibbion)
%CREATETOOLRIBBION Build the control design ribbon with an HTML based UI.
%   The ribbon is rendered using a uihtml component so that the styling can
%   closely follow the MATLAB 2025a ribbon appearance while still calling
%   the existing MATLAB callbacks for each control.

    this_dir = fileparts(mfilename('fullpath'));
    icon_dir = fullfile(this_dir,'..','..','Resources');

    iconData = struct( ...
        'new',encodeIcon('New_24.png'), ...
        'open',encodeIcon('Open_24.png'), ...
        'load',encodeIcon('LoadArrow_24.png'), ...
        'save',encodeIcon('Save_Dirty_24.png'), ...
        'export',encodeIcon('Export_24.png'), ...
        'settings',encodeIcon('Settings_16.png'), ...
        'run',encodeIcon('RunSave_24.png'), ...
        'main',encodeIcon('design_35.png'), ...
        'gain',encodeIcon('fit_app_35.png'), ...
        'filter',encodeIcon('Filter_35.png'), ...
        'syn',encodeIcon('gearsFull_35.png'), ...
        'stab',encodeIcon('workIcon_35_Blue.png'), ...
        'fr',encodeIcon('workIcon_35_Red.png'), ...
        'sim',encodeIcon('workIcon_35_Yellow.png'), ...
        'hq',encodeIcon('workIcon_35_Blue.png'), ...
        'ase',encodeIcon('workIcon_35.png'), ...
        'rlocus',encodeIcon('RTLocus_32.png'), ...
        'arrow',encodeIcon('arrowDown_16.png') ...
        );

    if ~isempty(obj.JRibbonPanel) && isvalid(obj.JRibbonPanel)
        delete(obj.JRibbonPanel);
    end

    obj.closeAllRibbonDropdowns();

    clearAnchor('NewJButton');
    clearAnchor('OpenJButton');
    clearAnchor('LoadJButton');
    clearAnchor('SaveJButton');
    clearAnchor('ExportJButton');
    clearAnchor('PlotJButton');
    clearAnchor('RunSelJButton');
    clearAnchor('RunSelMenuButton');

    positionRibbon = getpixelposition(obj.RibbonPanel);
    panelW = positionRibbon(3);
    panelH = positionRibbon(4);

    htmlSource = buildHtml(panelW, panelH, iconData, currSelToolRibbion);

    obj.JRibbonPanel = uihtml(obj.RibbonPanel, ...
        'HTMLSource',htmlSource, ...
        'Position',[0 0 panelW panelH]);
    obj.JRibbonPanel.DataChangedFcn = @(src,evt)handleHtmlEvent(evt.Data);

    obj.JRPHComp = obj.JRibbonPanel;
    obj.JRPHCont = [];

    createAnchors();

    runEnabled = currSelToolRibbion ~= 4;
    enableState = 'off';
    if runEnabled
        enableState = 'on';
    end
    if ~isempty(obj.RunSelJButton) && isvalid(obj.RunSelJButton)
        obj.RunSelJButton.Enable = enableState;
    end
    if ~isempty(obj.RunSelMenuButton) && isvalid(obj.RunSelMenuButton)
        obj.RunSelMenuButton.Enable = enableState;
    end
    obj.updateRibbonState(runEnabled, currSelToolRibbion);

    function dataUri = encodeIcon(fileName)
        fullPath = fullfile(icon_dir,fileName);
        fid = fopen(fullPath,'rb');
        if fid < 0
            error('createToolRibbion:MissingIcon','Icon file not found: %s',fullPath);
        end
        cleaner = onCleanup(@()fclose(fid));
        raw = fread(fid,Inf,'*uint8');
        dataUri = ['data:image/png;base64,' matlab.net.base64encode(raw)];
    end

    function css = boundsToCss(bounds)
        css = sprintf('left:%dpx;top:%dpx;width:%dpx;height:%dpx;', ...
            bounds(1), panelH - bounds(2) - bounds(4), bounds(3), bounds(4));
    end

    function html = buildHtml(panelWidth,panelHeight,icons,selectedId)
        runEnabledState = selectedId ~= 4;
        viewKey = obj.viewIdToKey(selectedId);
        initialState = jsonencode(struct('runEnabled',runEnabledState,'activeView',viewKey));

        elements = {};
        elements{end+1} = sprintf('<div id="ribbonRoot" style="width:%dpx;height:%dpx;">',panelWidth,panelHeight); %#ok<AGROW>

        groupTitles = {
            struct('text','FILE','bounds',[0 76 320 14]), ...
            struct('text','RUN','bounds',[326 76 50 14]), ...
            struct('text','VIEW','bounds',[382 76 140 14]), ...
            struct('text','EDITOR','bounds',[528 76 315 14])};
        for k = 1:numel(groupTitles)
            g = groupTitles{k};
            elements{end+1} = sprintf('<div class="group-title" style="%s">%s</div>', ...
                boundsToCss(g.bounds), g.text); %#ok<AGROW>
        end

        dividers = {
            [322 3 2 90];
            [378 3 2 90];
            [524 3 2 90];
            [845 3 2 90]};
        for k = 1:numel(dividers)
            elements{end+1} = sprintf('<div class="divider" style="%s"></div>', boundsToCss(dividers{k})); %#ok<AGROW>
        end

        buttonDefs = [ ...
            struct('id','new','label','New','icon',icons.new,'tooltip','Create a new requirement or synthesis','bounds',[5 3 45 71],'classes','icon-24'), ...
            struct('id','open','label','Open','icon',icons.open,'tooltip','Open an existing item','bounds',[55 3 45 71],'classes','icon-24'), ...
            struct('id','load','label','Load','icon',icons.load,'tooltip','Load data into the project','bounds',[105 3 45 71],'classes','icon-24'), ...
            struct('id','save','label','Save','icon',icons.save,'tooltip','Save the current project','bounds',[155 3 45 71],'classes','icon-24'), ...
            struct('id','export','label','Export','icon',icons.export,'tooltip','Export project data','bounds',[205 3 45 71],'classes','icon-24'), ...
            struct('id','settings','label','Settings','icon',icons.settings,'tooltip','Adjust plotting options','bounds',[250 3 70 28],'classes','icon-16 horizontal'), ...
            struct('id','syn','label','SYN','icon',icons.syn,'tooltip','Launch the synthesis editor','bounds',[531 3 40 71],'classes','icon-32'), ...
            struct('id','sim','label','SIM','icon',icons.sim,'tooltip','Launch the simulation editor','bounds',[665 3 40 71],'classes','icon-32'), ...
            struct('id','hq','label','HQ','icon',icons.hq,'tooltip','Launch the handling qualities editor','bounds',[710 3 40 71],'classes','icon-32'), ...
            struct('id','ase','label','ASE','icon',icons.ase,'tooltip','Launch the aeroservoelastic editor','bounds',[755 3 40 71],'classes','icon-32'), ...
            struct('id','rlocus','label','RLoc','icon',icons.rlocus,'tooltip','Launch the root locus editor','bounds',[800 3 40 71],'classes','icon-32') ...
            ];

        viewDefs = [ ...
            struct('id','view-main','label','Main','selText','Main','icon',icons.main,'tooltip','Switch to the main view','bounds',[387 3 40 71],'classes','icon-32 view','viewKey','main'), ...
            struct('id','view-gain','label','Gain','selText','Gains','icon',icons.gain,'tooltip','Switch to the gain view','bounds',[432 3 40 71],'classes','icon-32 view','viewKey','gain'), ...
            struct('id','view-filter','label','Filter','selText','Filter','icon',icons.filter,'tooltip','Switch to the filter view','bounds',[477 3 40 71],'classes','icon-32 view','viewKey','filter') ...
            ];

        for k = 1:numel(buttonDefs)
            b = buttonDefs(k);
            elements{end+1} = sprintf([ ...
                '<button class="ribbon-btn %s" data-id="%s" title="%s" style="%s">' ...
                '<span class="icon-wrap"><img src="%s" alt="%s"></span>' ...
                '<span class="label">%s</span>' ...
                '</button>'], b.classes, b.id, b.tooltip, boundsToCss(b.bounds), b.icon, b.label, b.label); %#ok<AGROW>
        end

        for k = 1:numel(viewDefs)
            b = viewDefs(k);
            elements{end+1} = sprintf([ ...
                '<button class="ribbon-btn %s" data-id="%s" data-view="%s" data-label="%s" title="%s" style="%s">' ...
                '<span class="icon-wrap"><img src="%s" alt="%s"></span>' ...
                '<span class="label">%s</span>' ...
                '</button>'], b.classes, b.id, b.viewKey, b.selText, b.tooltip, boundsToCss(b.bounds), b.icon, b.label, b.label); %#ok<AGROW>
        end

        splitDefs = [ ...
            struct('id','run','label','Run','icon',icons.run,'tooltip','Run the current design and save the results','bounds',[331 3 40 71],'classes','icon-24'), ...
            struct('id','stab','label','STAB','icon',icons.stab,'tooltip','Launch the stability requirement editor','bounds',[576 3 40 71],'classes','icon-32'), ...
            struct('id','fr','label','FR','icon',icons.fr,'tooltip','Launch the frequency response requirement editor','bounds',[620 3 40 71],'classes','icon-32') ...
            ];

        for k = 1:numel(splitDefs)
            s = splitDefs(k);
            elements{end+1} = sprintf([ ...
                '<div class="split-button %s" data-id="%s" style="%s">' ...
                '<button class="split-main" title="%s">' ...
                '<span class="icon-wrap"><img src="%s" alt="%s"></span>' ...
                '<span class="label">%s</span>' ...
                '</button>' ...
                '<button class="split-arrow" title="More options">' ...
                '<img src="%s" alt="More" />' ...
                '</button>' ...
                '</div>'], s.classes, s.id, boundsToCss(s.bounds), s.tooltip, s.icon, s.label, s.label, icons.arrow); %#ok<AGROW>
        end

        elements{end+1} = '</div>'; %#ok<AGROW>

        styleBlock = [ ...
            '<style>' ...
            'body{margin:0;font-family:"Segoe UI","Helvetica Neue",Arial,sans-serif;background:transparent;color:#f3f5f7;overflow:hidden;}' ...
            '#ribbonRoot{position:relative;background:linear-gradient(180deg,#3c3f45 0%,#292c33 100%);' ...
            'border-bottom:1px solid #14161a;box-shadow:inset 0 1px 0 rgba(255,255,255,0.08);overflow:hidden;}' ...
            '.ribbon-btn,.split-button button{background:linear-gradient(180deg,#4f535c 0%,#2f3238 100%);' ...
            'border:1px solid #1f2025;border-radius:4px;color:#f3f5f7;cursor:pointer;' ...
            'box-shadow:0 1px 0 rgba(255,255,255,0.12) inset,0 1px 2px rgba(0,0,0,0.6);' ...
            'transition:background 0.15s ease,box-shadow 0.15s ease,transform 0.15s ease;}' ...
            '.ribbon-btn:hover,.split-button button:hover{background:linear-gradient(180deg,#5d616b 0%,#343840 100%);' ...
            'box-shadow:0 1px 0 rgba(255,255,255,0.18) inset,0 2px 4px rgba(0,0,0,0.55);}' ...
            '.ribbon-btn:active,.split-button button:active{transform:translateY(1px);}' ...
            '.ribbon-btn{position:absolute;display:flex;flex-direction:column;align-items:center;' ...
            'justify-content:flex-start;padding:6px 4px 4px 4px;gap:4px;text-transform:none;}' ...
            '.ribbon-btn.horizontal{flex-direction:row;justify-content:flex-start;gap:6px;padding:4px 10px;}' ...
            '.ribbon-btn .label{font-size:10px;font-weight:600;letter-spacing:0.3px;text-transform:uppercase;}' ...
            '.ribbon-btn.horizontal .label{text-transform:none;font-size:10px;font-weight:500;}' ...
            '.ribbon-btn .icon-wrap{display:flex;align-items:center;justify-content:center;width:100%;}' ...
            '.ribbon-btn.horizontal .icon-wrap{width:auto;}' ...
            '.ribbon-btn img{max-width:32px;max-height:32px;image-rendering:auto;}' ...
            '.ribbon-btn.icon-24 img{max-width:24px;max-height:24px;}' ...
            '.ribbon-btn.icon-16 img{max-width:16px;max-height:16px;}' ...
            '.group-title{position:absolute;background:linear-gradient(180deg,rgba(255,255,255,0.08) 0%,rgba(0,0,0,0.25) 100%);' ...
            'border:1px solid rgba(0,0,0,0.6);border-radius:3px;color:#cfd2d6;font-size:10px;' ...
            'font-weight:600;letter-spacing:1px;text-align:center;padding-top:1px;}' ...
            '.divider{position:absolute;width:2px;background:linear-gradient(180deg,rgba(255,255,255,0.15) 0%,rgba(0,0,0,0.5) 100%);' ...
            'top:6px;bottom:6px;}' ...
            '.split-button{position:absolute;display:flex;flex-direction:column;}' ...
            '.split-button .split-main{display:flex;flex-direction:column;align-items:center;justify-content:flex-start;' ...
            'padding:6px 4px 4px 4px;gap:4px;border-bottom-left-radius:0;border-bottom-right-radius:0;}' ...
            '.split-button .split-arrow{display:flex;align-items:center;justify-content:center;height:16px;' ...
            'border-top-left-radius:0;border-top-right-radius:0;padding:0;}' ...
            '.split-button img{max-width:100%;max-height:100%;}' ...
            '.split-button.disabled{pointer-events:none;opacity:0.45;}' ...
            '.split-button.disabled button{cursor:default;}' ...
            '.ribbon-btn.view{border:1px solid rgba(45,105,172,0.35);}' ...
            '.ribbon-btn.view.active{background:linear-gradient(180deg,#4d7fb6 0%,#355c8e 100%);' ...
            'border-color:#1f4d7f;box-shadow:0 0 0 1px rgba(255,255,255,0.25) inset;}' ...
            '.ribbon-btn.view.active .label{color:#eaf3ff;}' ...
            '</style>' ];

        scriptBlock = [ ...
            '<script>' ...
            'const initialState = ' initialState ';' ...
            'const ribbonRoot = document.getElementById("ribbonRoot");' ...
            'let matlabComponent = null;' ...
            'let pendingMessages = [];' ...
            'let messageCounter = 0;' ...
            'function flushPending(){if(!matlabComponent){return;}while(pendingMessages.length){const msg=pendingMessages.shift();matlabComponent.Data=msg;}}' ...
            'function setup(htmlComponent){matlabComponent = htmlComponent;flushPending();}' ...
            'function sendToMATLAB(payload){const msg = Object.assign({msgId:++messageCounter},payload);if(matlabComponent){matlabComponent.Data = msg;}else{pendingMessages.push(msg);}}' ...
            'function updateRunEnabled(enabled){const el = document.querySelector(".split-button[data-id=\"run\"]");' ...
            'if(!el){return;} el.classList.toggle("disabled",!enabled); el.querySelectorAll("button").forEach(btn=>btn.disabled=!enabled);}' ...
            'function updateActiveView(key){document.querySelectorAll(".ribbon-btn.view").forEach(btn=>{' ...
            'btn.classList.toggle("active",key && btn.dataset.view===key);});}' ...
            'document.querySelectorAll(".ribbon-btn").forEach(btn=>{' ...
            'btn.addEventListener("click",()=>{const id = btn.dataset.id;' ...
            'if(btn.dataset.view){const label = btn.dataset.label || btn.textContent.trim();sendToMATLAB({type:"view",id:btn.dataset.view,label});}' ...
            'else{sendToMATLAB({type:"button",id});}});});' ...
            'document.querySelectorAll(".split-button").forEach(container=>{' ...
            'const mainBtn = container.querySelector(".split-main");' ...
            'const arrowBtn = container.querySelector(".split-arrow");' ...
            'mainBtn.addEventListener("click",()=>sendToMATLAB({type:"split-primary",id:container.dataset.id}));' ...
            'arrowBtn.addEventListener("click",evt=>{' ...
            'const rect = arrowBtn.getBoundingClientRect();' ...
            'const rootRect = ribbonRoot.getBoundingClientRect();' ...
            'sendToMATLAB({type:"split-menu",id:container.dataset.id,rect:{x:rect.left-rootRect.left,y:rect.top-rootRect.top,width:rect.width,height:rect.height}});' ...
            '});' ...
            '});' ...
            'window.addEventListener("message",event=>{' ...
            'const data = event.data || {};' ...
            'if(data.type==="set-state"){if(data.hasOwnProperty("runEnabled")){updateRunEnabled(!!data.runEnabled);}' ...
            'if(data.hasOwnProperty("activeView")){updateActiveView(data.activeView);}}});' ...
            'updateRunEnabled(initialState.runEnabled);' ...
            'updateActiveView(initialState.activeView);' ...
            'sendToMATLAB({type:"ready"});' ...
            '</script>' ];

        html = strjoin({ ...
            '<!doctype html>', ...
            '<html lang="en">', ...
            '<head>', ...
            '<meta charset="utf-8">', ...
            '<meta name="viewport" content="width=device-width, initial-scale=1">', ...
            styleBlock, ...
            '</head>', ...
            '<body>', ...
            strjoin(elements,''), ...
            scriptBlock, ...
            '</body>', ...
            '</html>'},'');
    end

    function createAnchors()
        if isstruct(obj.RibbonAnchors)
            anchorNames = fieldnames(obj.RibbonAnchors);
            for k = 1:numel(anchorNames)
                h = obj.RibbonAnchors.(anchorNames{k});
                if ~isempty(h) && isvalid(h)
                    delete(h);
                end
            end
        end
        obj.RibbonAnchors = struct();
        obj.RibbonAnchors.New = createAnchor('NewJButton',[5 3 45 71]);
        obj.RibbonAnchors.Open = createAnchor('OpenJButton',[55 3 45 71]);
        obj.RibbonAnchors.Load = createAnchor('LoadJButton',[105 3 45 71]);
        obj.RibbonAnchors.Save = createAnchor('SaveJButton',[155 3 45 71]);
        obj.RibbonAnchors.Export = createAnchor('ExportJButton',[205 3 45 71]);
        obj.RibbonAnchors.Settings = createAnchor('PlotJButton',[250 3 70 28]);
        obj.RibbonAnchors.RunContainer = createAnchor('RunSelJButton',[331 3 40 71]);
        obj.RibbonAnchors.RunArrow = createAnchor('RunSelMenuButton',[331 3 40 16]);
        obj.RibbonAnchors.ViewMain = createAnchor('ViewMainAnchor',[387 3 40 71]);
        obj.RibbonAnchors.ViewGain = createAnchor('ViewGainAnchor',[432 3 40 71]);
        obj.RibbonAnchors.ViewFilter = createAnchor('ViewFilterAnchor',[477 3 40 71]);
        obj.RibbonAnchors.Syn = createAnchor('SynAnchor',[531 3 40 71]);
        obj.RibbonAnchors.Stab = createAnchor('StabAnchor',[576 3 40 71]);
        obj.RibbonAnchors.Fr = createAnchor('FrAnchor',[620 3 40 71]);
        obj.RibbonAnchors.Sim = createAnchor('SimAnchor',[665 3 40 71]);
        obj.RibbonAnchors.HQ = createAnchor('HqAnchor',[710 3 40 71]);
        obj.RibbonAnchors.ASE = createAnchor('AseAnchor',[755 3 40 71]);
        obj.RibbonAnchors.RLocus = createAnchor('RlocusAnchor',[800 3 40 71]);
    end

    function h = createAnchor(propName,bounds)
        pos = [bounds(1), panelH - bounds(2) - bounds(4), bounds(3), bounds(4)];
        h = uipanel('Parent',obj.RibbonPanel, ...
            'BackgroundColor',[0 0 0], ...
            'BorderType','none', ...
            'Visible','off', ...
            'Units','pixels', ...
            'HitTest','off', ...
            'Position',pos);
        if isprop(h,'HandleVisibility')
            h.HandleVisibility = 'off';
        end
        if isprop(h,'UserData')
            h.UserData = struct('Name',propName,'Bounds',bounds,'BasePosition',pos);
        end
        if isprop(h,'Tag')
            h.Tag = propName;
        end
        if isprop(obj,propName)
            obj.(propName) = h;
        end
    end

    function handleHtmlEvent(data)
        if isempty(data) || ~isfield(data,'type')
            return;
        end
        switch string(data.type)
            case "button"
                handleButtonEvent(string(data.id));
            case "view"
                if isfield(data,'id') && isfield(data,'label')
                    handleViewEvent(string(data.id), string(data.label));
                end
            case "split-primary"
                handleSplitPrimary(string(data.id));
            case "split-menu"
                if isfield(data,'id')
                    handleSplitMenu(string(data.id), data);
                end
            case "ready"
                obj.updateRibbonState();
        end
    end

    function handleButtonEvent(id)
        switch id
            case "new"
                obj.newRequierment_CB(obj.NewJButton,[]);
            case "open"
                obj.openRequierment_CB(obj.OpenJButton,[]);
            case "load"
                obj.fileLoad_CB(obj.LoadJButton,[]);
            case "save"
                obj.saveToolRibbon_CB(obj.SaveJButton,[]);
            case "export"
                obj.exportToolRibbon_CB(obj.ExportJButton,[]);
            case "settings"
                obj.settingsButton_CB(obj.PlotJButton,[]);
            case "syn"
                obj.menuNewSynthesis();
            case "sim"
                obj.menuNewSimReq();
            case "hq"
                obj.menuNewHQReq();
            case "ase"
                obj.menuNewASEReq();
            case "rlocus"
                obj.menuNewRTLReq();
        end
    end

    function handleViewEvent(viewId,label)
        switch viewId
            case "main"
                obj.toolRibButtonPanelSel_CB([],[],1,char(label));
            case "gain"
                obj.toolRibButtonPanelSel_CB([],[],4,char(label));
            case "filter"
                obj.toolRibButtonPanelSel_CB([],[],6,char(label));
        end
    end

    function handleSplitPrimary(id)
        switch id
            case "run"
                obj.runAndSaveGains();
            case "stab"
                obj.menuNewStabReq();
            case "fr"
                obj.menuNewFRReq();
        end
    end

    function handleSplitMenu(id,dataStruct)
        rect = [];
        if isfield(dataStruct,'rect')
            rect = dataStruct.rect;
        end
        switch id
            case "run"
                anchor = obj.RunSelMenuButton;
                anchor = updateAnchorPosition(anchor, rect);
                obj.runToolR(anchor);
            case "stab"
                anchor = obj.RibbonAnchors.Stab;
                anchor = updateAnchorPosition(anchor, rect);
                obj.stabDropMenu(anchor);
            case "fr"
                anchor = obj.RibbonAnchors.Fr;
                anchor = updateAnchorPosition(anchor, rect);
                obj.frDropMenu(anchor);
        end
    end

    function anchor = updateAnchorPosition(anchor, rect)
        if isempty(anchor) || ~isvalid(anchor)
            return;
        end

        basePos = [];
        if isprop(anchor,'UserData')
            info = anchor.UserData;
            if isstruct(info) && isfield(info,'BasePosition')
                basePos = info.BasePosition;
            end
        end

        if ~isempty(basePos)
            set(anchor,'Position',basePos);
            return;
        end

        if nargin < 2 || isempty(rect) || ~isstruct(rect) || ...
                ~all(isfield(rect,{'x','y','width','height'}))
            return;
        end

        htmlPos = obj.JRibbonPanel.Position;
        newX = htmlPos(1) + rect.x;
        newY = htmlPos(2) + htmlPos(4) - rect.y - rect.height;
        set(anchor,'Position',[newX newY rect.width rect.height]);
    end

    function clearAnchor(propName)
        if isprop(obj,propName)
            h = obj.(propName);
            if ~isempty(h) && isvalid(h)
                delete(h);
            end
            obj.(propName) = [];
        end
    end
end
