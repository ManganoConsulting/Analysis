function create_clfr_file(app, filepath)
%CREATE_CLFR_FILE Generate a clfr-like M-file from current UI selections.
%
% The emitted file defines:
%   function [X,Y] = clfr(oc,model,params,gains)
% and produces X{}, Y{} for each selected/ordered item in app.OrderTable.Data,
% with titles like "InputName to OutputName - Bode Mag/Phase".
%
% Assumptions:
% - Titles in OrderTable are created as "<input> to <output> - Bode Mag|Phase".
% - findSimulinkIO(app, mdlName) returns {inputNames, outputNames}.
% - Frequency vector string is in app.FrequencyVector (e.g., 'logspace(-1,1,1000)').

    if nargin < 2 || isempty(filepath)
        error('create_clfr_file:MissingPath','Output filepath is required.');
    end

    % Ensure folder exists
    outDir = fileparts(filepath);
    if ~isempty(outDir) && ~exist(outDir, 'dir')
        mkdir(outDir);
    end

    % Resolve model short name and I/O names
    if isempty(app.SimulinkModelEdit) || isempty(app.SimulinkModelEdit.Value)
        error('create_clfr_file:NoModel','Simulink model path/name is empty.');
    end
    [~, mdlName] = fileparts(app.SimulinkModelEdit.Value);

    if isempty(app.OrderTable) || isempty(app.OrderTable.Data)
        error('create_clfr_file:NoOrder','Order table is emptyâ€”nothing to export.');
    end

    % Get IO names from the model
    [inputNames, outputNames] = findSimulinkIO(app, mdlName);
    if isempty(inputNames) || isempty(outputNames)
        error('create_clfr_file:NoIO','Could not find Simulink I/O from model.');
    end

    % Pre-parse every ordered title into (oIdx, iIdx, kind)
    % Title format: "<in> to <out> - Bode Mag" or "... - Bode Phase"
    titles = app.OrderTable.Data(:);
    nObjs  = numel(titles);

    % Regex for parsing titles
    pat = '^(.*)\s+to\s+(.*)\s+-\s+Bode\s+(Mag|Phase)$';

    % Build mapping for fast lookup
    inMap  = containers.Map(inputNames,  num2cell(1:numel(inputNames)));
    outMap = containers.Map(outputNames, num2cell(1:numel(outputNames)));

    % Parse each title to indices
    objInIdx  = zeros(nObjs,1);
    objOutIdx = zeros(nObjs,1);
    objIsMag  = false(nObjs,1);

    for k = 1:nObjs
        t = titles{k};
        tok = regexp(t, pat, 'tokens', 'once');
        if isempty(tok) || numel(tok) ~= 3
            error('create_clfr_file:BadTitle', ...
                'Row %d has invalid title format: "%s"', k, t);
        end
        inName  = strtrim(tok{1});
        outName = strtrim(tok{2});
        kind    = strtrim(tok{3}); % 'Mag' or 'Phase'

        if ~isKey(inMap, inName)
            error('create_clfr_file:UnknownInput', ...
                'Row %d input "%s" not found among model inputs.', k, inName);
        end
        if ~isKey(outMap, outName)
            error('create_clfr_file:UnknownOutput', ...
                'Row %d output "%s" not found among model outputs.', k, outName);
        end

        objInIdx(k)  = inMap(inName);
        objOutIdx(k) = outMap(outName);
        objIsMag(k)  = strcmpi(kind, 'Mag');
    end

    % Frequency vector expression
    wExpr = app.FrequencyVector;
    if isempty(wExpr)
        wExpr = 'logspace(-1,1,1000)';
    end

    % ---- Write the file ----
    fid = fopen(filepath, 'w');
    if fid == -1
        error('create_clfr_file:OpenFailed','Could not open "%s" for writing.', filepath);
    end
    cleaner = onCleanup(@() fclose(fid));

    [~,mfile_name]= fileparts(filepath);
    fprintf(fid, 'function [X,Y] = %s(oc,model,params,gains)\n\n',mfile_name);
    fprintf(fid, '%% Auto-generated by FrequencyResponseEditorApp\n');
    fprintf(fid, '%% Model: %s\n', mdlName);
    fprintf(fid, '%% Generated: %s\n\n', datestr(now));
    fprintf(fid, '%% Call common parameters\n');
    fprintf(fid, 'commonOCscript_Req(oc,model,params,gains);\n\n');
    fprintf(fid, '%% Linearize\n');
    fprintf(fid, '%% load_system(model);\n');
    fprintf(fid, '[A,B,C,D] = linmod(model);\n\n');
    fprintf(fid, '%% State-space and frequency response\n');
    fprintf(fid, 'sys = ss(A,B,C,D);\n');
    fprintf(fid, 'w = %s;  %% frequency vector\n', wExpr);
    fprintf(fid, '[mag,phase] = bode(sys,w);\n\n');
    fprintf(fid, '%% Prepare outputs\n');
    fprintf(fid, 'X = cell(%d,1);\n', nObjs);
    fprintf(fid, 'Y = cell(%d,1);\n\n', nObjs);

    % Emit each row exactly in current order
    for k = 1:nObjs
        i = objInIdx(k);
        o = objOutIdx(k);

        % Comment for traceability
        fprintf(fid, '%% %s\n', titles{k});
        fprintf(fid, 'X{%d} = w;\n', k);

        if objIsMag(k)
            fprintf(fid, 'Y{%d} = 20*log10( squeeze(mag(%d,%d,:))'' );\n\n', k, o, i);
        else
            fprintf(fid, 'Y{%d} = mod( squeeze(phase(%d,%d,:))'', -360 );\n\n', k, o, i);
        end
    end

    fprintf(fid, 'end\n');

    % (Optional) tell the caller in the MATLAB console
    fprintf('Exported method: %s\n', filepath);
end
